- title: globalThis
  id: proposal-global
  has_specification: true
  description: ECMAScript Proposal, specs, and reference implementation for globalThis
  authors:
    - Jordan Harband
  champions:
    - Jordan Harband
  tests:
    - https://github.com/tc39/test262/issues/765
  presented:
    - date: November 2018
      url: https://github.com/tc39/tc39-notes/blob/master/es9/2018-11/nov-29.md#kevins-1pm-talk

- title: import()
  id: proposal-dynamic-import
  has_specification: true
  description: Adding a "function-like" import() module loading syntactic form to JavaScript
  authors:
    - Domenic Denicola
  champions:
    - Domenic Denicola
  tests:
    - https://github.com/tc39/test262/issues/1164
  example: >
    const main = document.querySelector("main");
      for (const link of document.querySelectorAll("nav > a")) {
        link.addEventListener("click", e => {
          e.preventDefault();

          import(`./section-modules/${link.dataset.entryModule}.js`)
            .then(module => {
              module.loadPageInto(main);
            })
            .catch(err => {
              main.textContent = err.message;
            });
        });
      }
  presented:
    - date: December 2016
      url: https://github.com/tc39/tc39-notes/blob/master/es7/2016-11/dec-1.md#14ii-import-open-issues-and-stage-3-discussion


- title: Legacy RegExp features in JavaScript
  id: proposal-regexp-legacy-features
  has_specification: false
  description: This is a specification draft for the legacy (deprecated) RegExp features in JavaScript, i.e., static properties of the constructor like RegExp.$1 as well as the RegExp.prototype.compile method.
  authors:
    - Claude Pache
  champions:
    - Mark Miller
    - Claude Pache
  tests:
    - https://github.com/tc39/test262/issues/1165
  presented:
    - date: May 2017
      url: https://github.com/tc39/tc39-notes/blob/master/es8/2017-05/may-25.md#15ia-regexp-legacy-features-for-stage-3

- title: BigInt
  id: proposal-bigint
  has_specification: true
  description: Arbitrary precision integers in JavaScript
  authors:
    - Daniel Ehrenberg
  champions:
    - Daniel Ehrenberg
  tests:
    - https://github.com/tc39/test262/issues/1056
  example: >
    const theBiggestInt = 9007199254740991n;

    const alsoHuge = BigInt(9007199254740991);
    // ↪ 9007199254740991n

    const hugeButString = BigInt('9007199254740991');
    // ↪ 9007199254740991n
  presented:
    - date: May 2018
      url: https://github.com/tc39/tc39-notes/blob/master/es9/2018-05/may-22.md#bigint-status-update

- title: import.meta
  id: proposal-import-meta
  has_specification: true
  description: A proposal for adding an import.meta metaproperty to JavaScript, for holding host-specific metadata about the current module.
  authors:
    - Domenic Denicola
  champions:
    - Domenic Denicola
  tests:
    - https://github.com/tc39/test262/issues/1342
  presented:
    - date: September 2017
      url: https://github.com/tc39/tc39-notes/blob/master/es8/2017-09/sept-27.md#12iiic-importmeta-for-stage-3

- title: Private instance methods and accessors
  id: proposal-private-methods
  has_specification: true
  description: Keeping state and behavior private to a class lets library authors present a clear, stable interface, while changing their code over time behind the scenes.
  authors:
    - Daniel Ehrenberg
  champions:
    - Daniel Ehrenberg
    - Kevin Gibbons
  tests:
    - https://github.com/tc39/test262/issues/1343
  presented:
    - date: January 2019
      url: https://github.com/tc39/tc39-notes/blob/master/es9/2019-01/jan-30.md#private-fields-and-methods-refresher
  example: >
    class Counter extends HTMLElement {
      #xValue = 0;

      get #x() { return #xValue; }
      set #x(value) {
        this.#xValue = value;
        window.requestAnimationFrame(this.#render.bind(this));
      }

      #clicked() {
        this.#x++;
      }

      constructor() {
        super();
        this.onclick = this.#clicked.bind(this);
      }

      connectedCallback() { this.#render(); }

      #render() {
        this.textContent = this.#x.toString();
      }
    }
    window.customElements.define('num-counter', Counter);

- title: Class Public Instance Fields & Private Instance Fields
  id: proposal-class-fields
  has_specification: true
  description: This proposes a combined vision for public fields and private fields, drawing on the earlier Orthogonal Classes and Class Evaluation Order proposals.
  authors:
    - Daniel Ehrenberg
    - Kevin Gibbons
  champions:
    - Daniel Ehrenberg
    - Jeff Morrison
    - Kevin Smith
    - Kevin Gibbons
  tests:
    - https://github.com/tc39/test262/issues/1161
  example: >
    class Foo {
        instancePropertyBar = 0;
        static staticPropertyBar = 0;
        #privatePropertyBar = 0;
        static #privatePropertyBar = 0;

        set foo(value) { console.log(value); }
    }
  presented:
    - date: January 2019
      url: https://github.com/tc39/tc39-notes/blob/master/es9/2019-01/jan-30.md#private-fields-and-methods-refresher

- title: Static class fields and private static methods
  id: proposal-static-class-features
  has_specification: true
  description: This proposal adds Static public fields, Static private methods and Static private fields
  authors:
    - Daniel Ehrenberg
    - Kevin Gibbons
    - Jeff Morrison
    - Kevin Smith
  champions:
    - Shu-Yu Guo
    - Daniel Ehrenberg
  presented:
    - date: January 2019
      url: https://github.com/tc39/tc39-notes/blob/master/es9/2019-01/jan-30.md#private-fields-and-methods-refresher
  example: >
    class ColorFinder {
      static #red = "#ff0000";

      static #blue = "#00ff00";

      static #green = "#0000ff";

      // ^ static class fields

      static white = "white";

      // ^ static public field.

      static colorName(name) {
        switch (name) {
          case "red": return ColorFinder.#red;
          case "blue": return ColorFinder.#blue;
          case "green": return ColorFinder.#green;
          default: throw new RangeError("unknown color");
        }
      }

      // Static method ^

      static #setColor(name) {

      }
      // ^ Static private method
    }

- title: Numeric Separators
  id: proposal-numeric-separator
  has_specification: true
  description: This proposal adds the ability to utilize numeric literal separators for increased readability in Javascript source
  authors:
    - Sam Goto
    - Rick Waldron
  champions:
    - Sam Goto
    - Rick Waldron
  tests:
    - https://github.com/tc39/test262/pull/1189
    - https://github.com/tc39/test262/pull/1176
  example: >
    var a = 31_557_600,
        b = 0b1111_1111
        c = 0xFF_FF_FF
  presented:
    - date: March 2019
      url: https://github.com/tc39/tc39-notes/blob/master/es10/2019-03/mar-28.md



- title: Promise.allSettled
  id: proposal-promise-allSettled
  has_specification: true
  description: This proposal is to match popular usage in libraries, adds a method which returns a promise that is fulfilled with an array of promise state snapshots, but only after all the original promises have settled, i.e. become either fulfilled or rejected.
  authors:
    - Jason Williams
    - Robert Pamely
    - Mathias Bynens
  champions:
    - Mathias Bynens
  tests:
    - https://github.com/tc39/test262/pull/2124
  example: >
    const promises = [ fetch('index.html'), fetch('https://does-not-exist/') ];
    const results = await Promise.allSettled(promises);
    const successfulPromises = results.filter(p => p.status === 'fulfilled');

  presented:
    - date: March 2019
      url: https://github.com/tc39/tc39-notes/blob/master/es10/2019-03/mar-26.md

- title: Hashbang Grammar
  id: proposal-hashbang
  has_specification: true
  description: This proposal is to match de-facto usage in some CLI JS hosts that allow for Shebangs / Hashbang. Such hosts strip the hashbang in order to generate valid JS source texts before passing to JS engines currently. This would unify and standardize how that is done..
  authors:
    - Bradley Farias
  champions:
    - Bradley Farias
  tests:
    - https://github.com/tc39/test262/pull/2065
  example: >
    #!/usr/bin/env node

    // in the Script Goal

    'use strict';

    console.log(1);


    /****** begining of another script ********/

    #!/usr/bin/env node

    // in the Module Goal

    export {};

    console.log(1);

  presented:
    - date: November 2018
      url: https://github.com/tc39/tc39-notes/blob/master/es9/2018-11/nov-28.md#hash-bang-grammar
